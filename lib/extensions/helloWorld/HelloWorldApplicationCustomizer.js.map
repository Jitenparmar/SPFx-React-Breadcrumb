{"version":3,"sources":["extensions/helloWorld/HelloWorldApplicationCustomizer.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,oDAAiD;AAGjD,sEAIwC;AAKxC,6BAA+B;AAC/B,oCAAsC;AAEtC,sDAAiD;AAEjD,IAAM,UAAU,GAAW,iCAAiC,CAAC;AAU7D,qFAAqF;AACrF;IACU,mDAAqE;IAD/E;;IAoCA,CAAC;IA9BQ,gDAAM,GAAb;QAEE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;YAC1B,IAAI,CAAC,eAAe;gBAClB,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,gBAAgB,CAC/C,qCAAe,CAAC,GAAG,EACnB,EAAE,SAAS,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;YAEpC,8EAA8E;YAC9E,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;gBAC1B,OAAO,CAAC,KAAK,CAAC,+CAA+C,CAAC,CAAC;gBAC/D,MAAM,CAAC;YACT,CAAC;YAED,IAAM,OAAO,GAAmE,KAAK,CAAC,aAAa,CACjG,oBAAU,EACV;gBACE,OAAO,EAAE,IAAI,CAAC,OAAO;aACtB,CACF,CAAC;YAEF,QAAQ,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;QAC5D,CAAC;QAED,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAEO,oDAAU,GAAlB;QACE,OAAO,CAAC,GAAG,CAAC,gFAAgF,CAAC,CAAC;IAChG,CAAC;IA7BD;QADC,qBAAQ;iEA0BR;IAKH,sCAAC;CApCD,AAoCC,CAnCS,+CAAyB,GAmClC;kBApCoB,+BAA+B","file":"extensions/helloWorld/HelloWorldApplicationCustomizer.js","sourcesContent":["import { override } from '@microsoft/decorators';\r\nimport { Log } from '@microsoft/sp-core-library';\r\n\r\nimport {\r\n  BaseApplicationCustomizer,\r\n  PlaceholderContent,\r\n  PlaceholderName\r\n} from '@microsoft/sp-application-base';\r\nimport { Dialog } from '@microsoft/sp-dialog';\r\n\r\nimport * as strings from 'HelloWorldApplicationCustomizerStrings';\r\n\r\nimport * as React from 'react';\r\nimport * as ReactDom from 'react-dom';\r\n\r\nimport HelloWorld from './components/HelloWorld';\r\n\r\nconst LOG_SOURCE: string = 'HelloWorldApplicationCustomizer';\r\n\r\n/**\r\n * If your command set uses the ClientSideComponentProperties JSON input,\r\n * it will be deserialized into the BaseExtension.properties object.\r\n * You can define an interface to describe it.\r\n */\r\nexport interface IHelloWorldApplicationCustomizerProperties {\r\n}\r\n\r\n/** A Custom Action which can be run during execution of a Client Side Application */\r\nexport default class HelloWorldApplicationCustomizer\r\n  extends BaseApplicationCustomizer<IHelloWorldApplicationCustomizerProperties> {\r\n\r\n    private _topPlaceholder: PlaceholderContent | undefined;\r\n\r\n  @override\r\n  public onInit(): Promise<void> {\r\n\r\n    if (!this._topPlaceholder) {\r\n      this._topPlaceholder =\r\n        this.context.placeholderProvider.tryCreateContent(\r\n          PlaceholderName.Top,\r\n          { onDispose: this._onDispose });\r\n\r\n      // The extension should not assume that the expected placeholder is available.\r\n      if (!this._topPlaceholder) {\r\n        console.error('The expected placeholder (Top) was not found.');\r\n        return;\r\n      }\r\n\r\n      const element: React.ReactElement<IHelloWorldApplicationCustomizerProperties> = React.createElement(\r\n        HelloWorld,\r\n        {\r\n          context: this.context\r\n        }\r\n      );\r\n  \r\n      ReactDom.render(element, this._topPlaceholder.domElement);\r\n    }\r\n\r\n    return Promise.resolve();\r\n  }\r\n\r\n  private _onDispose(): void {\r\n    console.log('[HelloWorldApplicationCustomizer._onDispose] Disposed custom nav placeholders.');\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}